반갑습니다! 저장은 컨트롤에스
오늘의 내용저장
add-> commit -> push //순차적 업로드

tracked, untracked //변화상태를 추적합니다.

staged, unstaged //공연이 시작됩니다. 이제 커밋에 반영됨.

만약 git를 최초로 사용하는 경우, 해당 아이디와 이메일을 인증하라는 경고 알림이 뜬다. 오류 메시지에 출력되는 양식대로 본인의 깃헙 아이디와
이메일만 추가해서 적으면 그대로 진행됨.

git init //저장 공간을 만들어줍니다. 해당 폴더를 처음 시작할 시에
git add a.txt 
git commit -m "메시지" a.txt

git remote add origin (깃헙주소) //오리진 주소 사이 띄어쓰기 유의합니다.
git push -u origin master //다음부터는 git push만 써도 됩니다. 바로바로 업로드 가능.

<배제 명령>
git rm --cached b.txt // --cached가 있으면 온라인은 지워지지만, 내 저장소에는 파일이 남습니다.
-즉, rm만 하면 unstaged 상태에서만 끝납니다.-

git commit -m "확인사살" //절대 b.txt를 적어주지 않습니다.
-커밋까지 확실히 해야 최종적으로 untracked 상태가 되며, 더 이상 변화상태(Modified)를 추적하지 않습니다!!-

<클론 폴더 받아오기>
클론 대상의 깃헙으로 가서 주소를 카피합니다.
git clone (대상 폴더 주소) //하면 뚝딱입니다. 내 피시에 업로드됨.
git pull //클론 폴더를 동기화함.

도스창 이동은 cd입니다!! 
// cd 띄어쓰고 이동할 폴더 바로 드래그하면 됩니다.

<untracked와 unstaged의 차이>
커밋은 로컬 리파지토리에 저장한 것

푸시는 리모트 리파지토리에 반영하는 것

 untrackes: git에서 이력관리대상에 등록되지 않은  파일
 unstaged: git이 관리대상으로 포함한 파일이나 staged 상태가 아니므로 이력저장(commit)을 할때 저장 대상에서 제외되는 파일

 push는 바로 이 commit들을 모아모아 올리는 것이다!!(최종제출느낌)  

 <대상지정없는 commit>
 git commit -m "메시지" //파일 지정없이 이 상태로만 할 시, 파란색 상태들만 처리된다.(스테이징 상태의 변경 같은)
 git commit -m "메시지" * //별표를 달아주면 연두색들을 모두 처리해준다!(스테이징 상태 모두 업데이트 처리하기)

